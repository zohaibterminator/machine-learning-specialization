Lets say you run a large movie streaming website and your users have rated movies using zero to five stars. In a typical recommended system you have a set of users and a set of items. Here we have four users Alice, Bob Carol and Dave, which have numbered users 1,2,3,4, as well as some movies. The users have rated the movie from zero to five stars. So the items are the movies, which we have to recommend to the users. The logic explained here will apply whenever something has to be recommended be it restaurants, products, etc.

Here, n_u will used to denote number of users and n_m to denote the number of movies. We have 4 users, so n_u will be 4, and we have 5 movies, so n_m will be 5. We will use r(i, j) to denote whether or not the user j has given a rating to the movie i. If user 1 has given a rating to movie 1 but not to movie 3, it will be represented as r(1, 1) = 1 but r(3, 1) = 0. Then we will use y^(i, j) to denote the rating given to movie i by user j. If y^(1, 3) = 3, that means user 3 has given a rating of 3 to movie 1. Not every user will rate the movie, thats why it is important for the system to know which user has given a rating to which movie.

One way to implement the system is that we try to predict what rating the user will give to the movies they haven't given rating to, and recommend those movies to the user that are more likely to rate as five stars. We will develop an algorithm to do just that, with an assumption, that we have extra information about the movies like there categories. We will also look at the algorithm that can recommend products even if it doesn't have those extra features.